import logging
import asyncio
import json
import re
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

TOKEN = "7829682977:AAE_b4K_jrt7OqskOzdhlaZknEEjTYcqIgA"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°—Ç–∞–Ω –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–µ–∂–∏–º–∞–º–∏ –±–æ—Ç–∞
class TaskState(StatesGroup):
    waiting_for_task = State()
    waiting_for_deletion = State()

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á —É —Ñ–∞–π–ª—ñ
TASKS_FILE = "tasks.json"

def load_tasks():
    try:
        with open(TASKS_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

def save_tasks(tasks):
    with open(TASKS_FILE, "w", encoding="utf-8") as file:
        json.dump(tasks, file, ensure_ascii=False, indent=4)

def parse_time(text):
    match = re.search(r"(\d{1,2}):(\d{2})", text)
    if match:
        hour, minute = map(int, match.groups())
        now = datetime.now()
        task_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if task_time < now:
            task_time += timedelta(days=1)
        return task_time
    return None

async def reminder():
    while True:
        tasks = load_tasks()
        now = datetime.now().strftime("%H:%M")
        for task in tasks[:]:
            if "time" in task and task["time"] == now:
                chat_id = task["chat_id"]
                await bot.send_message(chat_id, f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {task['text']}")
                tasks.remove(task)
                save_tasks(tasks)
        await asyncio.sleep(60)

async def clear_chat():
    while True:
        now = datetime.now()
        if now.hour == 0 and now.minute == 0:
            tasks = load_tasks()
            tasks.clear()
            save_tasks(tasks)
            logger.info("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ 00:00")
        await asyncio.sleep(60)

# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏"), KeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏")],
        [KeyboardButton(text="üìú –°–ø–∏—Å–æ–∫"), KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç")]
    ],
    resize_keyboard=True
)


@dp.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext):
    await state.clear()
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–æ—á–∞–≤ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º.")

    # –¢–µ–∫—Å—Ç —ñ–∑ –æ–ø–∏—Å–æ–º –±–æ—Ç–∞
    intro_text = (
        "ü§ñ *–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏!*\n\n"
        "üìå *–©–æ –≤–º—ñ—î —Ü–µ–π –±–æ—Ç?*\n"
        "‚úÖ ‚ûï –î–æ–¥–∞–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —É –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ (–∑ —á–∞—Å–æ–º –∞–±–æ –±–µ–∑)\n"
        "‚úÖ ‚ùå –í–∏–¥–∞–ª—è—Ç–∏ –æ–∫—Ä–µ–º—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∞–±–æ –≤—Å—ñ –æ–¥—Ä–∞–∑—É\n"
        "‚úÖ üìú –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å\n"
        "‚úÖ üßπ –û—á–∏—â–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ\n"
        "‚úÖ ‚è∞ –ù–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è —É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —á–∞—Å\n\n"
        "‚ö° *–©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ ‚Äì —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ!*"
    )

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –æ–ø–∏—Å –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –≤–∏–±–æ—Ä–æ–º –¥—ñ–π
    await message.answer(intro_text, parse_mode="Markdown")
    await message.answer("‚¨áÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)


@dp.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏")
async def add_task(message: types.Message, state: FSMContext):
    await state.set_state(TaskState.waiting_for_task)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∑–∞–¥–∞—á—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: '10:30 –í–∏–π—Ç–∏ –∑–∞ —Ö–ª—ñ–±–æ–º'")

@dp.message(TaskState.waiting_for_task)
async def process_new_task(message: types.Message, state: FSMContext):
    time = parse_time(message.text)
    text = re.sub(r"\d{1,2}:\d{2}", "", message.text).strip()
    tasks = load_tasks()
    task_entry = {"chat_id": message.chat.id, "text": text, "time": time.strftime("%H:%M") if time else None}
    tasks.append(task_entry)
    save_tasks(tasks)
    await state.clear()
    response = f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–¥–∞–Ω–∞: {text}"
    if time:
        response += f" –Ω–∞ {time.strftime('%H:%M')}"
    await message.answer(response + "\n\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=keyboard)

@dp.message(F.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏")
async def delete_options(message: types.Message, state: FSMContext):
    await state.clear()
    tasks = load_tasks()
    if not tasks:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    inline_keyboard = [
        [InlineKeyboardButton(text=f"‚ùå {task['text']}", callback_data=f"delete_task_{i}")]
        for i, task in enumerate(tasks)
    ]
    inline_keyboard.append([InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å–µ", callback_data="delete_all")])
    markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=markup)

@dp.callback_query(F.data.startswith("delete_task_"))
async def delete_task_callback(query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    task_index = int(query.data.split("_")[2])
    tasks = load_tasks()

    if 0 <= task_index < len(tasks):
        deleted_task = tasks.pop(task_index)
        save_tasks(tasks)
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {query.from_user.id} –≤–∏–¥–∞–ª–∏–≤ –∑–∞–¥–∞—á—É: {deleted_task['text']}")

        await query.message.delete()  # –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–∫–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        await query.message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–∞!\n\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=keyboard)
    else:
        await query.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")


@dp.callback_query(F.data == "delete_all")
async def delete_all_tasks(query: types.CallbackQuery, state: FSMContext):
    await state.clear()

    # –û—á–∏—â–∞—î–º–æ –∑–∞–¥–∞—á—ñ
    save_tasks([])
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {query.from_user.id} –≤–∏–¥–∞–ª–∏–≤ —É—Å—ñ –∑–∞–¥–∞—á—ñ.")

    await query.message.delete()  # –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–∫–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    await query.message.answer("üóë –í—Å—ñ –∑–∞–¥–∞—á—ñ –≤–∏–¥–∞–ª–µ–Ω—ñ!\n\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=keyboard)
    await query.answer("‚úÖ –í—Å—ñ –∑–∞–¥–∞—á—ñ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–∞–¥–∞—á—ñ
    tasks = load_tasks()

    if not tasks:
        await query.answer("‚úÖ –ù–µ–º–∞—î –∑–∞–¥–∞—á –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True)
        return

    # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –∑–∞–¥–∞—á—ñ
    save_tasks([])
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {query.from_user.id} –≤–∏–¥–∞–ª–∏–≤ —É—Å—ñ –∑–∞–¥–∞—á—ñ.")

    # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–º—ñ–Ω–∏
    await query.message.edit_text("üóë –í—Å—ñ –∑–∞–¥–∞—á—ñ –≤–∏–¥–∞–ª–µ–Ω—ñ.\n\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=keyboard)
    await query.answer("‚úÖ –í—Å—ñ –∑–∞–¥–∞—á—ñ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")


@dp.message(F.text == "üìú –°–ø–∏—Å–æ–∫")
async def show_tasks(message: types.Message, state: FSMContext):
    await state.clear()
    tasks = load_tasks()
    if tasks:
        task_list = "\n".join([f"{i+1}. {task['text']} ({task['time'] if task['time'] else '–±–µ–∑ —á–∞—Å—É'})" for i, task in enumerate(tasks)])
        await message.answer(f"üìã –í–∞—à—ñ –∑–∞–¥–∞—á—ñ:\n{task_list}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=keyboard)
    else:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–¥–∞—á. –í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=keyboard)

@dp.message(F.text == "üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç")
async def clear_chat_history(message: types.Message):
    chat_id = message.chat.id
    await message.answer("üßπ –û—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É...")

    try:
        last_message_id = message.message_id  # –û—Ç—Ä–∏–º—É—î–º–æ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

        # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 50 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —á–∞—Ç—ñ
        for message_id in range(last_message_id, last_message_id - 50, -1):
            try:
                await bot.delete_message(chat_id, message_id)
                await asyncio.sleep(0.1)  # –ó–∞–ø–æ–±—ñ–≥–∞—î rate limit —É Telegram
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")

        await message.answer("üßπ –ß–∞—Ç –æ—á–∏—â–µ–Ω–æ. –í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç. –ú–æ–∂–ª–∏–≤–æ, –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    asyncio.create_task(reminder())
    asyncio.create_task(clear_chat())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
